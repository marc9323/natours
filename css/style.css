@keyframes moveInLeft {
  0% {
    opacity: 0;
    transform: translateX(-10rem); }
  80% {
    transform: translateX(1rem); }
  100% {
    opacity: 1;
    transform: translate(0); } }

@keyframes moveInRight {
  0% {
    opacity: 0;
    transform: translateX(10rem); }
  80% {
    transform: translateX(-1rem); }
  100% {
    opacity: 1;
    transform: translate(0); } }

@keyframes moveInBottom {
  0% {
    opacity: 0;
    transform: translateY(3rem);
    /* move down - positive value */ }
  100% {
    opacity: 1;
    transform: translate(0); } }

/* use universal selector to perform css reset */
*::after,
*::before {
  margin: 0;
  padding: 0;
  box-sizing: inherit;
  /* box-sizing property by itself is not inherited, now it is */ }

/* root font size is set in the html element */
html {
  /* font-size: 10px; now 1 rem equals exactly 10px, use for conversion, removes ability to set default font size by user */
  font-size: 62.5%;
  /* root font size is typically the browser default of 16px, now adustable 10/16 = 62.5% */
  /* defines what one rem is */ }

body {
  box-sizing: border-box; }

body {
  /* some universal font properties */
  font-family: "Lato", sans-serif;
  font-weight: 400;
  /* font-size: 16px; */
  line-height: 1.7;
  color: #777;
  /* padding: 30px; /* for white border */
  padding: 3rem; }

.heading-primary {
  color: #ffffff;
  text-transform: uppercase;
  /* to prevent animation from jiggling up */
  backface-visibility: hidden;
  /* determines if the backface of an element when we transform it is visible to the user */
  margin-bottom: 6rem; }
  .heading-primary--main {
    display: block;
    /* takes up whole width and line breaks */
    font-size: 6rem;
    font-weight: 400;
    letter-spacing: 3.5rem;
    animation-name: moveInLeft;
    animation-duration: 1s;
    animation-timing-function: ease-out;
    /* animation-delay: 3s;
        animation-iteration-count: 3;
         */ }
  .heading-primary--sub {
    display: block;
    font-size: 2rem;
    font-weight: 700;
    letter-spacing: 1.75rem;
    animation-name: moveInRight;
    animation-duration: 1s;
    animation-timing-function: ease-in;
    /* short hand property:
        animation: moveInRight 1s ease-out;
        */ }

.heading-secondary {
  font-size: 3.5rem;
  text-transform: uppercase;
  font-weight: 700;
  display: inline-block;
  /* inline-block takes up only space of content */
  background-image: linear-gradient(to right bottom, rgba(126, 213, 111, 0.8), rgba(40, 180, 133, 0.8)), url(../img/nat-4.jpg);
  -webkit-background-clip: text;
  /* background gets clipped exactly where the text is */
  color: transparent;
  /* so backgroudn shows through */
  letter-spacing: .2rem;
  transition: all .2s; }
  .heading-secondary:hover {
    transform: skewY(2deg) skewX(15deg) scale(1.1);
    text-shadow: 0.5rem 1rem 2rem rgba(0, 0, 0, 0.2); }

.heading-tertiary {
  font-size: 1.6rem;
  font-weight: 700;
  text-transform: uppercase; }

.paragraph {
  font-size: 1.6rem; }
  .paragraph:not(:last-child) {
    margin-bottom: 3rem; }

.u-center-text {
  text-align: center; }

.u-margin-bottom-big {
  margin-bottom: 8rem; }

.u-margin-bottom-small {
  margin-bottom: 1.5rem; }

.u-margin-bottom-medium {
  margin-bottom: 4rem; }

.btn {
  /* psedudo::after adds a virtual element right after behind the element that we are selecting that we can then style */ }
  .btn:link, .btn:visited {
    /* pseudo class, link is special state of the .btn selector */
    text-transform: uppercase;
    text-decoration: none;
    padding: 1.5rem 4rem;
    /* top and bottom, left and right, top, right,  bottom, left */
    display: inline-block;
    /* box model works on this element as if it were a normal block element, inline means treated as text */
    /* to center the button, set text-align: center up in .text-box */
    border-radius: 10rem;
    transition: all .2s;
    /* now the transform on hover and active will be transitioned from this initial state and duration */
    position: relative;
    font-size: 1.6rem; }
  .btn:hover {
    transform: translateY(-3px);
    /* make button move up on hover */
    box-shadow: 0 1rem 2rem rgba(0, 0, 0, 0.2); }
    .btn:hover::after {
      /* when button hovers we want pseudo styles for the after element */
      transform: scaleX(1.4) scaleY(1.6);
      opacity: 0;
      /* transitioned fade out */ }
  .btnactive {
    /* when we click it */
    transform: translateY(-1px);
    box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.2); }
  .btn--white {
    background-color: #ffffff;
    color: #777; }
    .btn--whiteafter {
      background-color: #ffffff; }
  .btn::after {
    /* treated like a child of the button */
    content: "";
    /* must be specified in order to appear */
    display: inline-block;
    /* cause button is also inline block */
    height: 100%;
    width: 100%;
    border-radius: 10rem;
    position: absolute;
    /* to put behind button , reference is first element with relative position that it can find, button*/
    top: 0;
    left: 0;
    z-index: -1;
    /* position of elements layered */
    transition: all .4s;
    /* transition for the btn:hover::after state */ }
  .btn--animated {
    animation: moveInBottom .5s ease-out .75s;
    /* makes element invisible prior to animation */
    animation-fill-mode: backwards;
    /* automatically apply the styles of the zero% before starting */ }

.btn-text:link, .btn-text:visited {
  font-size: 1.6rem;
  color: #55c57a;
  display: inline-block;
  /*so we can use box model properties */
  text-decoration: none;
  border-bottom: 1px solid #55c57a;
  padding: 3px;
  transition: all .2s; }

.btn-text:hover {
  background-color: #55c57a;
  color: #ffffff;
  box-shadow: 0 1rem 2rem rgba(0, 0, 0, 0.15);
  transform: translateY(-2px); }

.btn-text:active {
  box-shadow: 0 1rem 1rem rgba(0, 0, 0, 0.15);
  transform: translateY(0); }

.composition {
  position: relative; }
  .composition__photo {
    width: 55%;
    box-shadow: 0 1.5rem 4rem rgba(0, 0, 0, 0.4);
    border-radius: 2px;
    position: absolute;
    z-index: 10;
    transition: all .2s;
    outline-offset: 2rem; }
    .composition__photo--p1 {
      left: 0;
      top: -2rem; }
    .composition__photo--p2 {
      right: 0;
      top: 2rem; }
    .composition__photo--p3 {
      left: 20%;
      top: 10rem; }
    .composition__photo:hover {
      outline: 1.5rem solid #55c57a;
      transform: scale(1.05) translateY(-0.5rem);
      box-shadow: 0 2.5rem 4rem rgba(0, 0, 0, 0.5);
      z-index: 20; }
  .composition:hover .composition__photo:not(:hover) {
    transform: scale(0.95); }

.feature-box {
  background-color: rgba(255, 255, 255, 0.8);
  font-size: 1.5rem;
  padding: 2.5rem;
  text-align: center;
  border-radius: 3px;
  box-shadow: 0 1.5rem 4rem rgba(0, 0, 0, 0.15);
  transition: transform .3s; }
  .feature-box__icon {
    font-size: 6rem;
    margin-bottom: .5rem;
    display: inline-block;
    /* to take up all available space */
    background-image: linear-gradient(to right bottom, rgba(126, 213, 111, 0.8), rgba(40, 180, 133, 0.8));
    -webkit-background-clip: text;
    color: transparent;
    /* so gradient shows through */ }
  .feature-box:hover {
    transform: translateY(-1.5rem) scale(1.03); }

.card {
  perspective: 150rem;
  -moz-perspective: 150rem;
  /* firfox */ }
  .card__side {
    background-color: orangered;
    color: #fff;
    font-size: 2rem;
    height: 50rem;
    transition: all .8s; }
  .card:hover .card__side {
    transform: rotateY(180deg); }

.row {
  max-width: 114rem;
  margin: 0 auto; }
  .row:not(:last-child) {
    margin-bottom: 8rem; }
  .row::after {
    content: "";
    display: table;
    clear: both; }
  .row [class^="col-"] {
    float: left; }
    .row [class^="col-"]:not(:last-child) {
      margin-right: 6rem; }
  .row .col-1-of-2 {
    width: calc((100% - 6rem) / 2); }
  .row .col-1-of-3 {
    width: calc((100% - 2 * 6rem) / 3); }
  .row .col-2-of-3 {
    width: calc(2 * ((100% - 2 * 6rem) / 3) + 6rem); }
  .row .col-1-of-4 {
    width: calc((100% - 3 * 6rem) / 4); }
  .row .col-2-of-4 {
    width: calc(2 * ((100% - 3 * 6rem) / 4) + 6rem); }
  .row .col-3-of-4 {
    width: calc(3 * ((100% - 3 * 6rem) / 4) + 2 * 6rem); }

.header {
  height: 95vh;
  /* 95% of viewport height */
  background-image: linear-gradient(to right bottom, rgba(126, 213, 111, 0.8), rgba(40, 180, 133, 0.8)), url("../img/hero.jpg");
  background-size: cover;
  background-position: top;
  /*top of image always stays at top of container */
  /* clockwise clippath */
  clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%);
  position: relative;
  /* so we can set .logo-box img container to absolute */ }
  .header__logo-box {
    position: absolute;
    /* we set .header to relative */
    top: 4rem;
    left: 4rem; }
  .header__logo {
    height: 3.5rem; }
  .header__text-box {
    position: absolute;
    /* recall header parent is relative */
    top: 40%;
    left: 50%;
    /* in relation to the parent element */
    transform: translate(-50%, -50%);
    /* these 50% are in relation now to the element itself not the parent any longer */
    text-align: center;
    /* to center the button */ }

.section-about {
  background-color: #f7f7f7;
  padding: 25rem 0;
  margin-top: -20vh; }

.section-features {
  padding: 20rem 0;
  background-image: linear-gradient(to right bottom, rgba(126, 213, 111, 0.8), rgba(40, 180, 133, 0.8)), url("../img/nat-4.jpg");
  background-size: cover;
  /* covers entire section */
  transform: skewY(-7deg);
  margin-top: -10rem; }
  .section-features > * {
    transform: skewY(7deg); }

.section-tours {
  background-color: #f7f7f7;
  padding: 25rem 0 50rem 0;
  margin-top: -15rem; }
